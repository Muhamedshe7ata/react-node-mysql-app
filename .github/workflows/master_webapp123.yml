# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy Node.js app to Azure Web App - webapp123

on:
  push:
    branches:
      - master # Or 'main', depending on your primary branch name
  workflow_dispatch: # Allows manual trigger from GitHub Actions tab

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read # This is required for actions/checkout

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: '20.x' # Or the specific version your app needs

      - name: Install Backend Dependencies
        run: npm install
        working-directory: ./backend # <-- Execute this command inside the backend folder

      # Remove or adjust 'npm run build' and 'npm run test' if they don't apply to your backend package.json
      # Based on your backend package.json screenshot, you have 'start', 'test', 'serve' scripts.
      # 'test' can remain with --if-present if you have backend tests.
      # 'build' might not be necessary for a Node.js backend unless you're transpiling code (e.g., TypeScript).
      # Let's keep test and remove build as it's common not to have a 'build' for simple Node.js backends.
      # If you DO need a build step (like Babel or TS compile), add 'npm run build' here.
      # - name: Run Backend Tests
      #   run: npm test --if-present
      #   working-directory: ./backend # <-- Execute this command inside the backend folder


      # Package the contents of the backend directory
      # The Azure Web App deploy task typically expects a folder containing the application files or a zip file
      # We will zip the entire backend folder. The deploy task will then specify this folder as the package.
      - name: Zip Backend for Deployment
        run: zip -r release.zip backend # zip the backend folder into release.zip

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: node-app # Artifact name remains node-app
          path: release.zip # Upload the generated zip file

  deploy:
    runs-on: ubuntu-latest
    needs: build # Depends on the build job
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }} # URL is generated by the deploy step

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: node-app # Download the artifact named node-app
          path: ${{ runner.temp }}/release-package # Download it to a specific folder in temp directory

      # The deploy action can accept a zip file directly, no need to unzip manually
      - name: 'Deploy to Azure Web App'
        id: deploy-to-webapp # Assign an ID to this step to reference its outputs (like webapp-url)
        uses: azure/webapps-deploy@v3 # Use the Azure Web App deployment action
        with:
          app-name: 'myreactnodeapi-abcXYZ' # Your Azure App Service name
          slot-name: 'Production' # The deployment slot (usually Production for the main site)
          package: ${{ runner.temp }}/release-package/release.zip # Point directly to the downloaded zip file
          publish-profile: ${{ secrets.AZUREAPPSERVICE_CLIENTID_D7EBA9257E2B41D5BAAFFD845AA7CBF3 }} # Your secure publish profile
# # Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
## More GitHub Actions for Azure: https://github.com/Azure/actions
# name: Build and deploy Node.js app to Azure Web App - webapp123

# on:
#   push:
#     branches:
#       - master
#   workflow_dispatch:

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     permissions:
#       contents: read #This is required for actions/checkout

#     steps:
#       - uses: actions/checkout@v4

#       - name: Set up Node.js version
#         uses: actions/setup-node@v3
#         with:
#           node-version: '20.x'

#       - name: npm install, build, and test
#         run: |
#           npm install
#           npm run build --if-present
#           npm run test --if-present

#       - name: Zip artifact for deployment
#         run: zip release.zip ./* -r

#       - name: Upload artifact for deployment job
#         uses: actions/upload-artifact@v4
#         with:
#           name: node-app
#           path: release.zip

#   deploy:
#     runs-on: ubuntu-latest
#     needs: build
#     environment:
#       name: 'Production'
#       url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    
#     steps:
#       - name: Download artifact from build job
#         uses: actions/download-artifact@v4
#         with:
#           name: node-app

#       - name: Unzip artifact for deployment
#         run: unzip release.zip
      
#       - name: 'Deploy to Azure Web App'
#         id: deploy-to-webapp
#         uses: azure/webapps-deploy@v3
#         with:
#           app-name: 'webapp123'
#           slot-name: 'Production'
#           package: .
#           publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_748E22D9E0F742CCB5819DD3A4DA2803 }}


# #########
# ##########
# # name: Deploy Vite Frontend to Azure Web App - webapp123

# # on:
# #   push:
# #     branches:
# #       - master
# #   workflow_dispatch:

# # jobs:
# #   deploy:
# #     runs-on: ubuntu-latest

# #     steps:
# #       - name: Checkout code
# #         uses: actions/checkout@v4

# #       - name: Upload dist folder
# #         uses: azure/webapps-deploy@v3
# #         with:
# #           app-name: 'webapp123'  # 🔁 Replace with your Azure Web App name if different
# #           slot-name: 'Production'
# #           publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_748E22D9E0F742CCB5819DD3A4DA2803 }}
# #           package: frontend/dist