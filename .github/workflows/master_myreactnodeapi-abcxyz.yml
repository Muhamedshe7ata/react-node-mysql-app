  on:
    push:
      branches:
        - master
  
  jobs:
    check:
      runs-on: ubuntu-latest
      steps:
        - name: Check out repository
          uses: actions/checkout@v4
        - name: Print hello
          run: echo "This is an independent job with no dependencies."

    build:
      runs-on: ubuntu-latest
      steps:
        - name: Check out repository
          uses: actions/checkout@v4
        - name: Set up Node.js
          uses: actions/setup-node@v4
          with:
            node-version: '18.x'
        - name: Install dependencies
          run: npm install
        - name: Build project
          run: npm run build
        - name: Zip backend
          run: zip -r backend.zip .
        - name: Upload Backend Artifact
          uses: actions/upload-artifact@v4
          with:
            name: backend-app-artifact
            path: backend.zip

    deploy:
      runs-on: ubuntu-latest
      needs: build # Depends on the build job finishing successfully
      environment:
        name: 'Production' # Azure deployment environment
        url: ${{ steps.deploy-to-webapp.outputs.webapp-url }} # URL is an output of the deploy step
      permissions:
        # Permissions needed for OIDC authentication with azure/login
        id-token: write # For requesting the JWT
        contents: read # To checkout/download artifact
  
      steps:
        # Download the artifact created by the build job
        - name: Download Backend Artifact
          uses: actions/download-artifact@v4
          with:
            name: backend-app-artifact # Match the artifact name from the build job
            path: ${{ runner.temp }}/backend-package # Download it to a temporary folder
  
        # Authenticate using the Service Principal secrets that *exist* in your GitHub repo
        - name: Login to Azure # <-- Add this step
          uses: azure/login@v2
          with:
            # Use the exact names from your GitHub Repository secrets
            client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_460837E0D64F42CF84BAD6BC7D1B4DA2 }} # Use this name from your screenshot
            tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_AE166161F8AE41A6A1B56E30AC7906E0 }} # Use this name from your screenshot
            subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_35068C0B460F42918CA82EE407B9161B }} # Use this name from your screenshot
            # Depending on how these SP secrets were created, you *might* need
            # 'enable-auth-dac: true' - add it if the next step still fails with auth.
  
        # Deploy the zipped backend application to the App Service
        - name: 'Deploy to Azure Web App'
          id: deploy-to-webapp # ID to reference outputs
          uses: azure/webapps-deploy@v3 # The action to deploy to Azure Web App
          with:
            app-name: ${{ env.AZURE_WEBAPP_NAME }}
            slot-name: 'Production' # Your deployment slot
            # Point 'package' to the downloaded zip file
            package: ${{ runner.temp }}/backend-package/backend.zip
            # REMOVE the publish-profile line, as you are now authenticating with azure/login
            # publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_YOUR_ACTUAL_SECRET_NAME }}